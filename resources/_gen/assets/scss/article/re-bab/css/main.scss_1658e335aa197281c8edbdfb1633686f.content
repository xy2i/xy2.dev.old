.d3-map {
  margin-bottom: 1rem; }

.d3-map .nav {
  display: flex;
  width: 100%;
  justify-content: space-between; }

/* Non-animated title, used only for content. 
   We use a pattern here (same for the buttons, too):
   1. Create a container element, invisible but with the actual content itself in a .shadow class.
   2. Create the actual content on top of that, which has position:absolute,
    in order to break it out of the document flow and animate it. 
   Finally, when d3 animates on state change, the element resizes correctly,
   and the absolutely-positionned title updates on top of that.
   Pseudo-elements don't work here unfortunately, because d3 can't select them for animation. */
.d3-map .title-container {
  /* We need a container with content, to have the correct size in flex.*/
  position: relative;
  /* However, we don't actually need the content itself, but just the size. */
  background-color: rgba(255, 255, 255, 0.3);
  height: 2rem; }

/* Shadow title. */
.d3-map .title-container .shadow {
  opacity: 0; }

/* Animated title. */
.d3-map .title-container .title {
  /* Finally, make sure the opacity doens't apply to the animated part. */
  opacity: 1;
  position: absolute;
  left: 0; }

.d3-map .d3-btn {
  position: relative;
  text-decoration: none;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem 0.25rem 0.25rem 0.25rem;
  transition: background 0.1s linear;
  border: none;
  color: yellow; }

.d3-map {
  flex-shrink: 0; }

.flex {
  display: flex;
  justify-content: center; }

.d3-map svg {
  max-width: 100%;
  height: auto;
  display: block;
  margin: 0 auto; }

/*# sourceMappingURL=style.css.map */